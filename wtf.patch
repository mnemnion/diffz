diff --git a/DiffMatchPatch.zig b/DiffMatchPatch.zig
index 2bf574f..dfec56c 100644
--- a/DiffMatchPatch.zig
+++ b/DiffMatchPatch.zig
@@ -222,11 +222,10 @@ fn diffCompute(
     check_lines: bool,
     deadline: u64,
 ) DiffError!DiffList {
-    var diffs = DiffList{};
-    errdefer deinitDiffList(allocator, &diffs);
-
     if (before.len == 0) {
         // Just add some text (speedup).
+        var diffs = DiffList{};
+        errdefer deinitDiffList(allocator, &diffs);
         try diffs.ensureUnusedCapacity(allocator, 1);
         diffs.appendAssumeCapacity(Diff.init(
             .insert,
@@ -237,6 +236,8 @@ fn diffCompute(
 
     if (after.len == 0) {
         // Just delete some text (speedup).
+        var diffs = DiffList{};
+        errdefer deinitDiffList(allocator, &diffs);
         try diffs.ensureUnusedCapacity(allocator, 1);
         diffs.appendAssumeCapacity(Diff.init(
             .delete,
@@ -249,6 +250,8 @@ fn diffCompute(
     const short_text = if (before.len > after.len) after else before;
 
     if (std.mem.indexOf(u8, long_text, short_text)) |index| {
+        var diffs = DiffList{};
+        errdefer deinitDiffList(allocator, &diffs);
         // Shorter text is inside the longer text (speedup).
         const op: Diff.Operation = if (before.len > after.len)
             .delete
@@ -273,6 +276,8 @@ fn diffCompute(
     if (short_text.len == 1) {
         // Single character string.
         // After the previous speedup, the character can't be an equality.
+        var diffs = DiffList{};
+        errdefer deinitDiffList(allocator, &diffs);
         try diffs.ensureUnusedCapacity(allocator, 2);
         diffs.appendAssumeCapacity(Diff.init(
             .delete,
@@ -290,13 +295,14 @@ fn diffCompute(
         // A half-match was found, sort out the return data.
         defer half_match.deinit(allocator);
         // Send both pairs off for separate processing.
-        const diffs_a = try dmp.diffInternal(
+        var diffs = try dmp.diffInternal(
             allocator,
             half_match.prefix_before,
             half_match.prefix_after,
             check_lines,
             deadline,
         );
+        errdefer deinitDiffList(allocator, &diffs);
         var diffs_b = try dmp.diffInternal(
             allocator,
             half_match.suffix_before,
@@ -314,7 +320,6 @@ fn diffCompute(
         }
 
         // Merge the results.
-        diffs = diffs_a;
         try diffs.ensureUnusedCapacity(allocator, 1);
         diffs.appendAssumeCapacity(
             Diff.init(.equal, try allocator.dupe(
@@ -477,7 +482,6 @@ fn diffHalfMatchInternal(
         errdefer allocator.free(prefix_after);
         const suffix_after = try allocator.dupe(u8, best_short_text_b);
         const best_common_text = try best_common.toOwnedSlice(allocator);
-        errdefer allocator.free(best_common_text);
         return .{
             .prefix_before = prefix_before,
             .suffix_before = suffix_before,
@@ -913,10 +917,10 @@ fn diffCleanupMerge(allocator: std.mem.Allocator, diffs: *DiffList) DiffError!vo
                                 const ii = pointer - count_delete - count_insert - 1;
                                 var nt = try allocator.alloc(u8, diffs.items[ii].text.len + common_length);
                                 const ot = diffs.items[ii].text;
-                                defer allocator.free(ot);
                                 @memcpy(nt[0..ot.len], ot);
                                 @memcpy(nt[ot.len..], text_insert.items[0..common_length]);
                                 diffs.items[ii].text = nt;
+                                allocator.free(ot);
                             } else {
                                 try diffs.ensureUnusedCapacity(allocator, 1);
                                 const text = try allocator.dupe(u8, text_insert.items[0..common_length]);
@@ -935,7 +939,7 @@ fn diffCleanupMerge(allocator: std.mem.Allocator, diffs: *DiffList) DiffError!vo
                                 text_insert.items[text_insert.items.len - common_length ..],
                                 old_text,
                             });
-                            defer allocator.free(old_text);
+                            allocator.free(old_text);
                             text_insert.items.len -= common_length;
                             text_delete.items.len -= common_length;
                         }
@@ -2274,6 +2278,18 @@ test diffBisect {
     }});
 }
 
+fn diffHalfMatchLeak(allocator: Allocator) !void {
+    const dmp = DiffMatchPatch{};
+    const text1 = "The quick brown fox jumps over the lazy dog.";
+    const text2 = "That quick brown fox jumped over a lazy dog.";
+    var diffs = try dmp.diff(allocator, text2, text1, true);
+    deinitDiffList(allocator, &diffs);
+}
+
+test "diffHalfMatch leak regression test" {
+    try testing.checkAllAllocationFailures(testing.allocator, diffHalfMatchLeak, .{});
+}
+
 fn testDiff(
     allocator: std.mem.Allocator,
     params: struct {
